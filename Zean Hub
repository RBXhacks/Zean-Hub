local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()


local HttpService = game:GetService("HttpService")
local fetchedKeyRaw = game:HttpGet("https://pastebin.com/raw/36Ck4QeD")
local keyList = {}

for key in string.gmatch(fetchedKeyRaw, "[^\r\n]+") do
    table.insert(keyList, key)
end

table.insert(keyList, "Nigil")

local Window = Rayfield:CreateWindow({
    Name = "Zean Hub",
    Icon = 0,
    LoadingTitle = "Zean Hub",
    LoadingSubtitle = "Credit: Sirius",
    Theme = "Ocean",
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "Big Hub"
    },
    Discord = {
        Enabled = false,
        Invite = "https://discord.gg/W6gKcTsP",
        RememberJoins = true
    },
    KeySystem = true,
    KeySettings = {
        Title = "Zean Hub Key System",
        Subtitle = "Enter the key to unlock script",
        Note = "Get key from our discord server",
        FileName = "ZeanHubKey",
        SaveKey = false,
        GrabKeyFromSite = false,
        Key = keyList
    }
})


local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local function GetLocalCharacter()
    local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    return char
end

local function GetLocalHumanoid()
    local char = GetLocalCharacter()
    return char and char:FindFirstChildOfClass("Humanoid")
end

local char = GetLocalCharacter()
local hum = GetLocalHumanoid()


local function WaitUntilAlive()
    repeat
        task.wait(0.25)
        local hum = GetLocalHumanoid()
    until hum and hum.Health > 0
end


local Tab = Window:CreateTab("Main", 4483362458)
local Tab1 = Window:CreateTab("Misc", 4483362458)

Tab:CreateSection("Main")

local DesiredWalkSpeed = 16
local DesiredJumpPower = 50

Tab:CreateSlider({
    Name = "WalkSpeed",
    Range = {0, 500},
    Increment = 5,
    Suffix = "speed",
    CurrentValue = 16,
    Callback = function(Value)
        DesiredWalkSpeed = Value
    end
})

Tab:CreateSlider({
    Name = "JumpPower",
    Range = {0, 500},
    Increment = 5,
    Suffix = "jump",
    CurrentValue = 50,
    Callback = function(Value)
        DesiredJumpPower = Value
    end
})

RunService.RenderStepped:Connect(function()
	local hum = GetLocalHumanoid()
	if hum then
		if hum.WalkSpeed ~= DesiredWalkSpeed then
			hum.WalkSpeed = DesiredWalkSpeed
		end
		if hum.JumpPower ~= DesiredJumpPower then
			hum.JumpPower = DesiredJumpPower
		end
	end
end)

local NoClipEnabled = false


Tab:CreateToggle({
    Name = "NoClip",
    CurrentValue = false,
    Callback = function(Value)
        NoClipEnabled = Value
    end
})

RunService.Stepped:Connect(function()
	if NoClipEnabled then
		local char = LocalPlayer.Character
		if char then
			for _, part in ipairs(char:GetDescendants()) do
				if part:IsA("BasePart") and part.CanCollide == true then
					part.CanCollide = false
				end
			end
		end
	end
end)

local FlyEnabled = false
local FlySpeed = 50
local BodyGyro, BodyVelocity

Tab:CreateToggle({
    Name = "Fly (Hold WASD, Space, Ctrl)",
    CurrentValue = false,
    Callback = function(Value)
        FlyEnabled = Value
        local char = GetLocalCharacter()
        local hrp = char and char:FindFirstChild("HumanoidRootPart")

        if Value and hrp then
            -- Start flying
            BodyGyro = Instance.new("BodyGyro")
            BodyGyro.P = 9e4
            BodyGyro.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
            BodyGyro.CFrame = hrp.CFrame
            BodyGyro.Parent = hrp

            BodyVelocity = Instance.new("BodyVelocity")
            BodyVelocity.Velocity = Vector3.new(0, 0, 0)
            BodyVelocity.MaxForce = Vector3.new(9e9, 9e9, 9e9)
            BodyVelocity.Parent = hrp

            -- Disable gravity from affecting the player
            local hum = GetLocalHumanoid()
            if hum then hum.PlatformStand = true end
        else
            -- Stop flying
            if BodyGyro then BodyGyro:Destroy() end
            if BodyVelocity then BodyVelocity:Destroy() end

            local hum = GetLocalHumanoid()
            if hum then hum.PlatformStand = false end
        end
    end
})


Tab:CreateSlider({
    Name = "Fly Speed",
    Range = {10, 300},
    Increment = 5,
    CurrentValue = 50,
    Callback = function(Value)
        FlySpeed = Value
    end
})

RunService.RenderStepped:Connect(function()
    if FlyEnabled and LocalPlayer and workspace.CurrentCamera then
        local char = GetLocalCharacter()
        local hrp = char:FindFirstChild("HumanoidRootPart")
        if not hrp or not BodyVelocity or not BodyGyro then return end

        local cam = workspace.CurrentCamera
        local direction = Vector3.zero

        if UserInputService:IsKeyDown(Enum.KeyCode.W) then
            direction = direction + cam.CFrame.LookVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then
            direction = direction - cam.CFrame.LookVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then
            direction = direction - cam.CFrame.RightVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then
            direction = direction + cam.CFrame.RightVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
            direction = direction + cam.CFrame.UpVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
            direction = direction - cam.CFrame.UpVector
        end

        if direction.Magnitude > 0 then
            direction = direction.Unit * FlySpeed
        end

        BodyVelocity.Velocity = direction
        BodyGyro.CFrame = cam.CFrame
    end
end)


Tab:CreateButton({
    Name = "Force Remove hacks",
    Callback = function()
        Rayfield:Destroy()
    end
})

Tab1:CreateSection("Chat")
Tab1:CreateInput({
    Name = "Chat",
    CurrentValue = "",
    PlaceholderText = "Put text here",
    RemoveTextAfterFocusLost = false,
    Flag = "Input231",
    Callback = function(Text)
        local TextChatService = game:GetService("TextChatService")
        TextChatService.TextChannels.RBXGeneral:SendAsync(Text)
    end
})

Tab1:CreateInput({
    Name = "Kick Player",
    CurrentValue = "",
    PlaceholderText = "Put text here",
    RemoveTextAfterFocusLost = false,
    Flag = "InputKick",
    Callback = function(Text)
        Players:WaitForChild(Text):Kick("Your a bitch frfr")
    end
})



-- AimBot Section
Tab1:CreateSection("AimBot")




-- ======= Aimbot Section =======
local VirtualInputManager = game:GetService("VirtualInputManager")

-- Settings
local AimbotFOV = 100
local AimbotKey = Enum.KeyCode.E
local AimbotToggleMode = false
local AimbotActive = false
local WallCheck = true
local TeamCheck = true
local HitPart = "Head"
local PredictionEnabled = true
local PredictionStrength = 0.12
local AutoFireEnabled = false
local ShowFOVCircle = true

-- Drawing FOV circle
local FOVCircle = Drawing.new("Circle")
FOVCircle.Thickness = 2
FOVCircle.Filled = false
FOVCircle.Color = Color3.fromRGB(255, 255, 255)
FOVCircle.Transparency = 1
FOVCircle.Visible = ShowFOVCircle

-- Update FOV circle
RunService.RenderStepped:Connect(function()
    local mouse = UserInputService:GetMouseLocation()
    FOVCircle.Position = Vector2.new(mouse.X, mouse.Y)
    FOVCircle.Radius = AimbotFOV
    FOVCircle.Visible = ShowFOVCircle
end)

-- Check if game is FFA (everyone on the same team or no teams)
local function IsFFA()
    local teams = {}
    for _, player in pairs(Players:GetPlayers()) do
        if player.Team then
            teams[player.Team] = true
        end
    end
    local teamCount = 0
    for _ in pairs(teams) do
        teamCount = teamCount + 1
    end
    return teamCount <= 1 -- One or zero teams = FFA
end

local ffaMode = IsFFA()

for _, player in pairs(Players:GetPlayers()) do
    if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        -- If not FFA and team check enabled, filter out same team
        if not (TeamCheck and not ffaMode and player.Team == LocalPlayer.Team) then
            -- continue with aimbot targeting logic here
        end
    end
end


-- Wall check function: returns true if line of sight is clear
local function IsVisible(targetPart)
    local camera = workspace.CurrentCamera
    local origin = camera.CFrame.Position
    local direction = (targetPart.Position - origin)

    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {LocalPlayer.Character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    raycastParams.IgnoreWater = true

    local raycastResult = workspace:Raycast(origin, direction, raycastParams)

    if raycastResult then
        -- Check if the hit instance belongs to the target's character
        if raycastResult.Instance:IsDescendantOf(targetPart.Parent) then
            return true -- target is visible
        else
            return false -- something else is blocking
        end
    else
        -- No obstruction detected
        return true
    end
end

-- Find closest valid target within FOV and visible (if wall check enabled)
local function GetClosestPlayer()
    local mousePos = UserInputService:GetMouseLocation()
    local shortestDistance = AimbotFOV
    local closestPlayer = nil

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            if not TeamCheck or player.Team ~= LocalPlayer.Team then
                local targetPart = player.Character:FindFirstChild(HitPart)
                if targetPart then
                    local screenPos, onScreen = workspace.CurrentCamera:WorldToViewportPoint(targetPart.Position)
                    if onScreen then
                        local dist = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude
                        if dist <= shortestDistance then
                            if WallCheck then
                                if IsVisible(targetPart) then
                                    shortestDistance = dist
                                    closestPlayer = player
                                end
                            else
                                shortestDistance = dist
                                closestPlayer = player
                            end
                        end
                    end
                end
            end
        end
    end

    return closestPlayer
end

-- Aim at player with optional prediction
local function AimAtPlayer(player)
    if not player.Character then return end
    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
    if not humanoid or humanoid.Health <= 0 then return end

    local targetPart = player.Character:FindFirstChild(HitPart)
    if not targetPart then return end

    if WallCheck and not IsVisible(targetPart) then
        return -- Don't aim if target is behind wall
    end

    -- Prediction calculation
    local predictedPos = targetPart.Position
    if PredictionEnabled and player.Character:FindFirstChild("HumanoidRootPart") then
        local velocity = player.Character.HumanoidRootPart.Velocity
        predictedPos = predictedPos + velocity * PredictionStrength
    end

    -- Set camera to look at predicted position
    local camera = workspace.CurrentCamera
    camera.CFrame = CFrame.new(camera.CFrame.Position, predictedPos)

    -- Auto fire logic
    if AutoFireEnabled then
        local mousePos = UserInputService:GetMouseLocation()
        -- Fire only if target is visible and within FOV
        if IsVisible(targetPart) then
            -- Press left mouse button down and up quickly to simulate click
            VirtualInputManager:SendMouseButtonEvent(mousePos.X, mousePos.Y, 0, true, game, 0)
            task.wait(0.05)
            VirtualInputManager:SendMouseButtonEvent(mousePos.X, mousePos.Y, 0, false, game, 0)
        end
    end
end

-- Input listeners
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == AimbotKey then
        if AimbotToggleMode then
            AimbotActive = not AimbotActive
        else
            AimbotActive = true
        end
    end
end)

UserInputService.InputEnded:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == AimbotKey and not AimbotToggleMode then
        AimbotActive = false
    end
end)

-- Main aimbot loop
RunService.RenderStepped:Connect(function()
    if AimbotActive then
        local target = GetClosestPlayer()
        if target then
            AimAtPlayer(target)
        end
    end
end)


-- UI Toggles & Sliders (example, add to your UI creation section)
Tab1:CreateToggle({ Name = "Enable Aimbot", CurrentValue = false, Callback = function(Value) IsAimbotOn = Value end })
Tab1:CreateToggle({ Name = "Wall Check", CurrentValue = true, Callback = function(Value) WallCheck = Value end })
Tab1:CreateToggle({ Name = "Ignore Teammates", CurrentValue = true, Callback = function(Value) TeamCheck = Value end })
Tab1:CreateToggle({ Name = "Enable Prediction", CurrentValue = true, Callback = function(Value) PredictionEnabled = Value end })
Tab1:CreateSlider({ Name = "Prediction Strength", Range = {0.01, 1}, Increment = 0.01, CurrentValue = 0.12, Callback = function(Value) PredictionStrength = Value end })
Tab1:CreateSlider({ Name = "Aimbot FOV", Range = {50, 2000}, Increment = 10, CurrentValue = 100, Callback = function(Value) AimbotFOV = Value end })
Tab1:CreateDropdown({ Name = "Hit Part", Options = {"Head", "Torso"}, CurrentOption = {"Head"}, Callback = function(opt) HitPart = opt[1] end })
Tab1:CreateDropdown({ Name = "Aimbot Keybind", Options = {"E", "Q", "F", "LeftShift"}, CurrentOption = {"E"}, Callback = function(opt) AimbotKey = Enum.KeyCode[opt[1]] end })
Tab1:CreateToggle({ Name = "Toggle or Hold", CurrentValue = false, Callback = function(Value) AimbotToggleMode = Value end })
Tab1:CreateToggle({ Name = "Auto Fire / Triggerbot", CurrentValue = false, Callback = function(Value) AutoFireEnabled = Value end })
Tab1:CreateToggle({ Name = "Show FOV Circle", CurrentValue = true, Callback = function(Value) 
    ShowFOVCircle = Value
    FOVCircle.Visible = Value
end })



-- ESP Section
local espEnabled = false

local function usesTeams()
    return game:GetService("Teams") and #game:GetService("Teams"):GetTeams() > 1
end

local function createESP(player)
    if player == LocalPlayer then return end
    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return end

    local character = player.Character
    local existing = character:FindFirstChild("ESPHighlight")
    if existing then existing:Destroy() end

    local isTeammate = usesTeams() and player.Team == LocalPlayer.Team
    local fillColor = isTeammate and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)

    local highlight = Instance.new("Highlight")
    highlight.Name = "ESPHighlight"
    highlight.FillColor = fillColor
    highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
    highlight.FillTransparency = 0.5
    highlight.OutlineTransparency = 0
    highlight.Adornee = character
    highlight.Parent = character

    local head = character:FindFirstChild("Head")
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if head and not head:FindFirstChild("ESPBillboard") then
        local billboard = Instance.new("BillboardGui", head)
        billboard.Name = "ESPBillboard"
        billboard.AlwaysOnTop = true
        billboard.Size = UDim2.new(0, 100, 0, 30)
        billboard.StudsOffset = Vector3.new(0, 2.5, 0)
        billboard.Adornee = head

        local textLabel = Instance.new("TextLabel", billboard)
        textLabel.Size = UDim2.new(1, 0, 0.5, 0)
        textLabel.Position = UDim2.new(0, 0, 0, 0)
        textLabel.BackgroundTransparency = 1
        textLabel.TextColor3 = fillColor
        textLabel.TextScaled = true
        textLabel.Font = Enum.Font.SourceSansBold
        textLabel.TextStrokeTransparency = 0.5

        local healthBar = Instance.new("Frame", billboard)
        healthBar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        healthBar.BorderSizePixel = 0
        healthBar.Position = UDim2.new(0, 0, 0.5, 0)
        healthBar.Size = UDim2.new(1, 0, 0.5, 0)

        RunService.RenderStepped:Connect(function()
            if player.Character and humanoid and player.Character:FindFirstChild("HumanoidRootPart") then
                local distance = math.floor((player.Character.HumanoidRootPart.Position - workspace.CurrentCamera.CFrame.Position).Magnitude)
                textLabel.Text = string.format("%s [%dm]", player.Name, distance)

                local healthPercent = humanoid.Health / humanoid.MaxHealth
                healthBar.Size = UDim2.new(healthPercent, 0, 0.5, 0)
                healthBar.BackgroundColor3 = Color3.fromRGB(255 * (1 - healthPercent), 255 * healthPercent, 0)
            end
        end)
    end
end

local function updateESPColor(player)
    if player == LocalPlayer then return end
    local char = player.Character
    if not char then return end

    local highlight = char:FindFirstChild("ESPHighlight")
    local head = char:FindFirstChild("Head")
    local billboard = head and head:FindFirstChild("ESPBillboard")
    local label = billboard and billboard:FindFirstChild("ESPLabel")

    if highlight then
        local fillColor = usesTeams() and player.Team == LocalPlayer.Team and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
        highlight.FillColor = fillColor
        if label then
            label.TextColor3 = fillColor
        end
    end
end

local function _Sp432()
    for _, pl_r in ipairs(Players:GetPlayers()) do
        if pl_r.Character and pl_r ~= LocalPlayer then
            createESP(pl_r)
        end
    end
end

local function _E()
    for _, v in ipairs(Players:GetPlayers()) do
        local char = v.Character
        if char then
            local highlight = char:FindFirstChild("ESPHighlight")
            local head = char:FindFirstChild("Head")
            if highlight then highlight:Destroy() end
            if head then
                local billboard = head:FindFirstChild("ESPBillboard")
                if billboard then billboard:Destroy() end
            end
        end
    end
end

-- Auto-apply ESP for new players and respawns
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        if espEnabled then
            task.wait(1)
            createESP(player)
        end
    end)
    player:GetPropertyChangedSignal("Team"):Connect(function()
        if espEnabled then
            updateESPColor(player)
        end
    end)
end)

for _, player in ipairs(Players:GetPlayers()) do
    player.CharacterAdded:Connect(function()
        if espEnabled then
            task.wait(1)
            createESP(player)
        end
    end)
    player:GetPropertyChangedSignal("Team"):Connect(function()
        if espEnabled then
            updateESPColor(player)
        end
    end)
end

-- Toggle ESP
Tab1:CreateSection("ESP")
Tab1:CreateToggle({
    Name = "ESP",
    CurrentValue = false,
    Flag = "ToggleESP",
    Callback = function(Value)
        espEnabled = Value
        if Value then
            _Sp432()
        else
            _E()
        end
    end
})

Rayfield:LoadConfiguration()
